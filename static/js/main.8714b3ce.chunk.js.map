{"version":3,"sources":["components/TodoListItem/TodoListItem.js","components/TodoList/TodoList.js","components/AppHeader/AppHeader.js","components/SearchPanel/SearchPanel.js","components/ItemStatusFilter/ItemStatusFilter.js","components/AddTodoItemForm/AddTodoItemForm.js","components/App/App.js","index.js"],"names":["TodoListItem","this","props","label","onDeleted","onToggleImportant","onToggleDone","done","important","style","color","fontWeight","classNames","className","onClick","type","Component","TodoList","todos","elements","map","item","id","itemProps","AppHeader","countTodo","countDone","SearchPanel","state","term","onSearchChange","e","text","target","value","setState","onSearch","placeholder","inputValue","onChange","ItemStatusFilter","tabsProperties","name","filter","onFilter","tabs","tabClassName","role","AddTodoItemForm","onLabelChange","onSubmit","preventDefault","onAdded","App","initId","todoData","createTodoItem","deleteItem","deletedId","findIndex","index","addItem","newItem","toggleTodoProperty","arr","property","selectedItemId","oldItem","slice","toggleImportant","toggleDone","searchData","length","toLowerCase","indexOf","onFilterChange","filterData","searchedData","doneCount","todoCount","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.8714b3ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TodoListItem.css';\r\n\r\n// в React первый аргумент компонента-функции - это объект со свойствами, передаваемыми в react-элемент\r\n// в компоненте-классе передаваемые свойства можно получить аналогично через деструктуризацию\r\n// традиционное именование этого объекта - props (properties)\r\n// описание компонентов через классы, а не через функции позвляет хранить и обновлять внутренее состояние компонента\r\nexport default class TodoListItem extends Component {\r\n  // метод render(), наследуемый от класса React.Component, возвращает react-элемент (как в функциональном компоненте)\r\n  render() {\r\n    // деструктуризация используется, чтобы получить свойства из объекта props\r\n    const { label, onDeleted, onToggleImportant, onToggleDone, done, important } = this.props;\r\n    // стили оформления задачи\r\n    const style = {\r\n      color: important ? 'steelblue' : 'black',\r\n      fontWeight: important ? 'bold' : 'normal'\r\n    };\r\n\r\n    let classNames = 'todo-list-item';\r\n\r\n    if (done) {\r\n      classNames += ' done';\r\n    }\r\n    if (important) {\r\n      classNames += ' important';\r\n    }\r\n\r\n    // создание html-элемента\r\n    return (\r\n      <div className={ classNames }>\r\n        <span\r\n          className=\"todo-list-item-label\"\r\n          style={ style }\r\n          onClick={ onToggleDone }>\r\n          { label }\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-success btn-sm float-right\"\r\n          onClick={ onToggleImportant }>\r\n          <i className=\"fa fa-exclamation\"></i>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-danger btn-sm float-right\"\r\n          onClick={ onDeleted }>\r\n          <i className=\"fa fa-trash-o\"></i>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoListItem.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  done: PropTypes.bool,\r\n  important: PropTypes.bool,\r\n  onDeleted: PropTypes.func,\r\n  onToggleImportant: PropTypes.func,\r\n  onToggleDone: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoListItem from '../TodoListItem/TodoListItem';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone }) => {\r\n  // создаем массив JSX-элементов на основе массива данных todoData\r\n  const elements = todos.map(item => {\r\n    // деструктуризация объекта item (задача).\r\n    // в переменну id - свойство id из item, в переменную itemProps - все остальные свойства\r\n    const { id, ...itemProps } = item;\r\n    // используем spread-оператор, чтобы передать в компонент новые переменные (свойства)\r\n    // имена создаваемых свойств элемента и имена свойств объекта item одинаковые,\r\n    // поэтому в данном случаем удобно использовать spread-оператор\r\n    // для каждого элемента списка вводим уникальный id для оптимизации скорости работы React\r\n    // для чистоты кода передаем в TodoListItem только те свойства, которые используются компонентом\r\n    return (\r\n      <li className=\"list-group-item\" key={ id }>\r\n        <TodoListItem\r\n          { ...itemProps }\r\n          onDeleted={ () => onDeleted(id) }\r\n          onToggleImportant={ () => onToggleImportant(id) }\r\n          onToggleDone={ () => onToggleDone(id) }\r\n        />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  // передаем в список ul массив JSX элементов elements\r\n  return (\r\n    <ul className=\"list-group todo-list\">\r\n      { elements }\r\n    </ul>\r\n  );\r\n};\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  onDeleted: PropTypes.func,\r\n  onToggleImportant: PropTypes.func,\r\n  onToggleDone: PropTypes.func\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AppHeader.css';\r\n\r\nconst AppHeader = ({ countTodo, countDone }) => (\r\n  <div className=\"app-header d-flex\">\r\n    <h1>To-Do List</h1>\r\n    <h2>{ countTodo } more to do, { countDone } done</h2>\r\n  </div>\r\n);\r\n\r\nAppHeader.propTypes = {\r\n  countTodo: PropTypes.number.isRequired,\r\n  countDone: PropTypes.number.isRequired\r\n};\r\n\r\nexport default AppHeader;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchPanel.css';\r\n\r\nexport default class SearchPanel extends Component {\r\n  state = { term: '' }\r\n\r\n  // получение данных из input, обновление локального state и передача в App для поиска\r\n  onSearchChange = e => {\r\n    const text = e.target.value;\r\n    this.setState({ term: text });\r\n    this.props.onSearch(text);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        className=\"form-control search-input\"\r\n        type=\"text\"\r\n        placeholder=\"type to search task\"\r\n        value={ this.state.inputValue }\r\n        onChange={ this.onSearchChange }>\r\n      </input>\r\n    );\r\n  }\r\n}\r\n\r\nSearchPanel.propTypes = {\r\n  onSearch: PropTypes.func\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ItemStatusFilter.css';\r\n\r\nexport default class ItemStatusFilter extends Component {\r\n  // свойства табов\r\n  tabsProperties = [\r\n    { name: 'all', label: 'All' },\r\n    { name: 'active', label: 'Active' },\r\n    { name: 'done', label: 'Done' }\r\n  ]\r\n\r\n  render() {\r\n    const { filter, onFilter } = this.props;\r\n\r\n    // стилизация табов и фильтрация данных по клику на таб\r\n    const tabs = this.tabsProperties.map(({ label, name }) => {\r\n      const isActiveTab = filter === name;\r\n      const tabClassName = isActiveTab ? 'btn-primary' : 'btn-outline-secondary';\r\n\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className={`btn ${tabClassName}`}\r\n          key={ name }\r\n          onClick={ () => onFilter(name) }>\r\n          { label }\r\n        </button>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"buttons btn-group\" role=\"group\">\r\n        { tabs }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nItemStatusFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onFilter: PropTypes.func\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AddTodoItemForm.css';\r\n\r\nexport default class AddTodoItemForm extends Component {\r\n  state = {\r\n    label: ''\r\n  }\r\n\r\n  onLabelChange = e => {\r\n    // текущий state компонента не зависит от предыдущего,\r\n    // поэтому мы сразу передаем объект без обращения к state\r\n    // для получения предыдущего состояния\r\n    this.setState({\r\n      label: e.target.value\r\n    });\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onAdded(this.state.label);\r\n    // очистка input\r\n    this.setState({\r\n      label: ''\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // связь между html-элементом input и react-компонентом односторонняя,\r\n      // т.е. html-элемент передает компоненту событие и оно срабатывает,\r\n      // только когда html-элемент изменяется. Иными словами, если state компонется изменится,\r\n      // html-элемент об этом никак не узнает. Такой html-элемент называется неконтролируемым (uncontrolled)\r\n      // передавая в value элемента значение из state компонента мы делаем элемент контролируемым (controlled)\r\n      <form\r\n        className=\"add-item-form d-flex\"\r\n        onSubmit={ this.onSubmit }>\r\n\r\n        <input\r\n          className=\"form-control search-input\"\r\n          type=\"text\"\r\n          placeholder=\"type to add new task\"\r\n          value={ this.state.label }\r\n          onChange={ this.onLabelChange }>\r\n        </input>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"add-item-btn btn btn-outline-primary\">\r\n          Add task\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodoItemForm.propTypes = {\r\n  onAdded: PropTypes.func\r\n};\r\n","import React, { Component } from 'react';\r\nimport TodoList from '../TodoList/TodoList';\r\nimport AppHeader from '../AppHeader/AppHeader';\r\nimport SearchPanel from '../SearchPanel/SearchPanel';\r\nimport ItemStatusFilter from '../ItemStatusFilter/ItemStatusFilter';\r\nimport AddTodoItemForm from '../AddTodoItemForm/AddTodoItemForm';\r\n\r\n// Имя react-компонента должно быть с заглавной буквы, иначе Babel не поймет, что создается кастомный компонент\r\nexport default class App extends Component {\r\n  // уникальный id задачи\r\n  initId = 0;\r\n\r\n  // Внутренее состояние компонента App\r\n  state = {\r\n    // массив задач\r\n    todoData: [\r\n      this.createTodoItem('Drink Coffee'),\r\n      this.createTodoItem('Have a lunch'),\r\n      this.createTodoItem('Build Awesome React App')\r\n    ],\r\n    // строка для поиска задач\r\n    term: '',\r\n    // фильтр по статусу задачи\r\n    filter: 'all'\r\n  };\r\n\r\n  // Создание новой задачи в массиве данных todoData в app state\r\n  createTodoItem(label) {\r\n    return {\r\n      label,\r\n      important: false,\r\n      done: false,\r\n      id: this.initId++\r\n    };\r\n  }\r\n\r\n  // Удаление задачи из app state\r\n  deleteItem = id => {\r\n    // setState работает асинхронно!\r\n    // если текущее состояние компонента зависит от предыдущего, нужно передавать в функцию аргумент state для\r\n    // получения актуального на момент вызова функции состояния,\r\n    // иначе можно передавать в stateState просто объект\r\n    // редактировать старый state и его свойства напрямую нельзя!\r\n    // любое обновление state проводить только через setState и передачи в него нового объекта\r\n    this.setState(({ todoData }) => {\r\n      const deletedId = todoData.findIndex(item => item.id === id);\r\n      const newTodoData = todoData.filter((item, index) => index !== deletedId);\r\n      return {\r\n        todoData: newTodoData\r\n      };\r\n    });\r\n  }\r\n\r\n  // Добавление новой задачи в app state\r\n  addItem = text => {\r\n    this.setState(({ todoData }) => {\r\n      const newItem = this.createTodoItem(text);\r\n      return {\r\n        todoData: [ ...todoData, newItem ]\r\n      };\r\n    });\r\n  }\r\n\r\n  // Создание нового массива данных todoData\r\n  toggleTodoProperty = (arr, id, property) => {\r\n    // индекс выбранной задачи в массиве todoData\r\n    const selectedItemId = arr.findIndex(item => item.id === id);\r\n    // выбранная задача\r\n    const oldItem = arr[selectedItemId];\r\n    // новая задача с обновленными свойствами done или important\r\n    const newItem = { ...oldItem, [property]: !oldItem[property] };\r\n    return [\r\n      ...arr.slice(0, selectedItemId),\r\n      newItem,\r\n      ...arr.slice(selectedItemId + 1)\r\n    ];\r\n  }\r\n\r\n  // Обновление свойства important задачи в app state\r\n  toggleImportant = id => {\r\n    this.setState(({ todoData }) => ({\r\n      todoData: this.toggleTodoProperty(todoData, id, 'important')\r\n    }));\r\n  }\r\n\r\n  // Обновление свойства done задачи в app state\r\n  toggleDone = id => {\r\n    this.setState(({ todoData }) => ({\r\n      todoData: this.toggleTodoProperty(todoData, id, 'done')\r\n    }));\r\n  }\r\n\r\n  // Обновление свойства поиска term в app state\r\n  onSearchChange = term => { this.setState({ term }); }\r\n\r\n  // Поиск задач\r\n  searchData = (todoData, term) => {\r\n    if (term.length === 0) {\r\n      return todoData;\r\n    }\r\n    return todoData.filter(item =>\r\n      item.label.toLowerCase().indexOf(term.toLowerCase()) > -1);\r\n  };\r\n\r\n  // Обновление свойства фильтрации filter в app state\r\n  onFilterChange = filter => { this.setState({ filter }); }\r\n\r\n  // Фильтрация по статусу задачи\r\n  filterData = (todoData, filter) => {\r\n    switch (filter) {\r\n    case 'all': return todoData;\r\n    case 'active': return todoData.filter(item => !item.done);\r\n    case 'done': return todoData.filter(item => item.done);\r\n    }\r\n  }\r\n\r\n  // render()- это функция компонента-класса, которая всегда возвращает (создает) html-элемент\r\n  render() {\r\n    const { todoData, term, filter } = this.state;\r\n    //задачи, отфильтрованные по статусу в результате поиска\r\n    const searchedData = this.filterData(this.searchData(todoData, term), filter);\r\n    // количество завершенных задач\r\n    const doneCount = todoData.filter(item => item.done).length;\r\n    // количество активных задач\r\n    const todoCount = todoData.length - doneCount;\r\n    return (\r\n      // обращение к react-элементу в JSX эквивалентно вызову метода React.createElement()\r\n      // в react-элемент можно передавать свойства\r\n      <div className=\"todo-app\">\r\n        <AppHeader\r\n          countTodo={ todoCount }\r\n          countDone={ doneCount}\r\n        />\r\n        <div className=\"top-panel d-flex\">\r\n          <SearchPanel onSearch={ this.onSearchChange }/>\r\n          <ItemStatusFilter\r\n            filter={filter}\r\n            onFilter={ this.onFilterChange }\r\n          />\r\n        </div>\r\n        <TodoList\r\n          todos={ searchedData }\r\n          onDeleted={ this.deleteItem }\r\n          onToggleImportant={ this.toggleImportant }\r\n          onToggleDone={ this.toggleDone }\r\n        />\r\n        <AddTodoItemForm onAdded={ this.addItem }/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App/App';\r\n\r\n// первый аргумент метода ReactDom.render() принимает исключительно react-элемент\r\n// чтобы сделать react-элемент из react-компонента нужно прописать <.../>\r\nReactDom.render(<App/>, document.querySelector('.root'));\r\n"],"sourceRoot":""}